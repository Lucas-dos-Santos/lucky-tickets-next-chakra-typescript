import Head from 'next/head'
import React, { useState, useEffect } from "react"
import { Loading, Header, MainContent } from "../components";
import { Box, Button, useColorMode } from "@chakra-ui/react"
import {
  useAddress,
  useContract,
  useContractRead,
  useContractWrite,
} from "@thirdweb-dev/react";

export default function Home() {
  const { colorMode, toggleColorMode } = useColorMode()
  const [userTickets, setUserTickets] = useState(0)
  const [totalWallets, setTotalWallets] = useState<string[]>([])
  const address = useAddress()
  const { contract, isLoading } = useContract(
    "0xd08A702521A8Ee55DE113c72dbf62381C1762E9A"
  )

  const { data: lotteryOperator } = useContractRead(
    contract,
    "lotteryOperator"
  )

  const { data: tickets } = useContractRead(
    contract,
    "getTickets"
  )

  const { data: winnings } = useContractRead(
    contract,
    "getWinningsForAddress",
    address
  )

  const { data: currentWinningReward } = useContractRead(
    contract,
    "currentWinningReward"
  )
  const { data: ticketPrice } = useContractRead(contract, "ticketPrice")
  const { data: expiration } = useContractRead(contract, "expiration")
  const { data: lastWinner } = useContractRead(contract, "lastWinner")
  const { data: lastWinnerAmount } = useContractRead(
    contract,
    "lastWinnerAmount"
  )
  const { data: totalCommission } = useContractRead(
    contract,
    "operatorTotalCommission"
  )
  const { mutateAsync: drawWinnerTicket } = useContractWrite(
    contract,
    "drawWinnerTicket"
  )
  const { mutateAsync: withdrawCommission } = useContractWrite(
    contract,
    "withdrawCommission"
  )
  const { mutateAsync: restartDraw } = useContractWrite(
    contract,
    "restartDraw"
  )
  const { mutateAsync: withdrawWinnings } = useContractWrite(
    contract,
    "withdrawWinnings"
  )
  const { mutateAsync: buyTickets } = useContractWrite(
    contract,
    "buyTickets"
  )

  useEffect(() => {
    if (tickets) {
      const wallets: string[] = []
      const userTotalTickets = tickets.reduce((total: number, ticketAdress: string) => {
        return ticketAdress === address ? total + 1 : total
      }, 0)
      tickets.forEach((wallet: string) => {
        if (!wallets.includes(wallet)) { wallets.push(wallet); }
      })
      setUserTickets(userTotalTickets)
      setTotalWallets(wallets)
    }
  }, [tickets, address])

  if (isLoading) { return <Loading /> }
  return (
    <>
      <Head>
        <title>Lucky Tickets</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Roboto%3Aital%2Cwght%400%2C100%3B0%2C300%3B0%2C400%3B0%2C500%3B0%2C700%3B0%2C900%3B1%2C100%3B1%2C300%3B1%2C400%3B1%2C500%3B1%2C700%3B1%2C900&display=swap"
        />
      </Head>
      <Header
        address={address}
        lotteryOperator={lotteryOperator}
        userTickets={userTickets}
        winnings={winnings}
        drawWinnerTicket={drawWinnerTicket}
        withdrawCommission={withdrawCommission}
        restartDraw={restartDraw}
        totalCommission={totalCommission}
        withdrawWinnings={withdrawWinnings}
      />
      <MainContent
        lotteryOperator={lotteryOperator}
        address={address}
        currentWinningReward={currentWinningReward}
        ticketPrice={ticketPrice}
        expiration={expiration}
        tickets={tickets}
        lastWinner={lastWinner}
        lastWinnerAmount={lastWinnerAmount}
        totalWallets={totalWallets}
        buyTickets={buyTickets}
      />
      {/*       <Button onClick={toggleColorMode} colorScheme="teal">
        Toggle color mode
      </Button> */}
    </>
  );
}
